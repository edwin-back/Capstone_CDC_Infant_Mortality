#Mean value imputation method 3.
library(caret)
##################################
#####Visualizing Missing Data#####
##################################
library(VIM) #For the visualization and imputation of missing values.
#Conducting a 1NN classification imputation.
iris.imputed1NN = kNN(iris.example, k = 1)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
#Conducting a 12NN classification imputation based on the square root of n.
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
##################################################
#####Using Minkowski Distance Measures in KNN#####
##################################################
library(kknn) #Load the weighted knn library.
#Separating the complete and missing observations for use in the kknn() function.
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
#Distance corresponds to the Minkowski power. # missing is the data we want to predict on
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
summary(cars)
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
#Basic graphical EDA for cars dataset.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed) # Y - Prediction - Epsilon, Residuals(epsilon) = Y_true - Prediction
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
##############################################
#####Manual example with the cars dataset#####
##############################################
help(cars)
cars #Investigating the cars dataset.
#Basic numerical EDA for cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
library(ggplot2)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
####################################################
#####Checking assumptions with the cars dataset#####
####################################################
#Linearity
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Constant Variance & Independent Errors
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
#Notice that the F-statistic value for the overall regression is the same as the
#square of the t-statistic value for the speed coefficient:
t.statistic = 9.464
f.statistic = 89.57
t.statistic^2
confint(model) #Creating 95% confidence intervals for the model coefficients.
####################################################
#####Checking assumptions with the cars dataset#####
####################################################
#Linearity
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Constant Variance & Independent Errors
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
#Visualizing another influence plot for the regression model.
library(car) #Companion to applied regression.
influencePlot(model)
#####################################
#####Predicting New Observations#####
#####################################
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
predict(model, newdata, interval = "confidence") #Construct confidence intervals
predict(model, newdata, interval = "prediction") #Construct prediction invervals
#Constructing confidence and prediction bands for the scope of our data.
newdata = data.frame(speed = 4:25)
conf.band = predict(model, newdata, interval = "confidence")
pred.band = predict(model, newdata, interval = "prediction")
#Visualizing the confidence and prediction bands.
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
####################################
#####The Box-Cox Transformation#####
####################################
library(car)
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value, find the x which gives us the maximum of y
lambda
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
#####################################################
#####Example using the State Information Dataset#####
#####################################################
help(state.x77)
state.x77 #Investigating the state.x77 dataset.
#Cleaning up the column names so that there are no spaces.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
states = as.data.frame(state.x77) #Forcing the state.x77 dataset to be a dataframe.
#Cleaning up the column names so that there are no spaces.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
#Creating a population density variable.
states[,9] = (states$Population*1000)/states$Area # new column with population desnity
colnames(states)[9] = "Density"
#Basic numerical EDA for states dataset.
summary(states)
sapply(states, sd)
cor(states)
# if using simple pure linear regression, no need to normalize.
cor(states)
# if using simple pure linear regression, no need to normalize.
cor(states)
#Basic graphical EDA for the states dataset.
plot(states)
#Creating a saturated model (a model with all variables included).
model.saturated = lm(Life.Exp ~ ., data = states)
summary(model.saturated) #Many predictor variables are not significant, yet the
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
library(MASS)
cats
ggplot(data = cats, aes(x = cats$Bwt, y = cats$Hwt)) + geom_point(aes(color = cats$Sex)) + labs(title = "Cat Heart Weight vs. Body Weight", x = "Heart Weight", y = "Body Weight")
# Your code here
library(ggplot2)
# Your code here
library(ggplot2)
ggplot(data = cats, aes(x = cats$Bwt, y = cats$Hwt)) + geom_point(aes(color = cats$Sex)) + labs(title = "Cat Heart Weight vs. Body Weight", x = "Heart Weight", y = "Body Weight")
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cats Dataset")
# Your code here
# Part A: regression equation
model = lm(Hwt ~ Bwt, data = cats)
summary(model)
plot(cats$Bwt, cats$Hwt, xlab = "Body Weight in kg", ylab = "Heart Weight in g", main = "Scatterplot of Cats Dataset")
abline(a = -0.3567, b = 4.0341, lty = 2)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cats Dataset")
abline(h = 0, lty = 2)
#Normality
qqnorm(model$residuals)
qqline(model$residuals)
qqnorm(model$residuals)
qqline(model$residuals)
plot(cats$Hwt, Hwt.res, main = "Residuals vs. Heart Weight", xlab = "Heart Weight", ylab = "Residuals of Heart Weight")
ggplot(data = cats, aes(x = cats$Bwt, y = cats$Hwt)) + geom_point() + labs(title = "Cat Heart Weight vs. Body Weight", x = "Heart Weight", y = "Body Weight")
Hwt.res = resid(model)
plot(cats$Hwt, Hwt.res, main = "Residuals vs. Heart Weight", xlab = "Heart Weight", ylab = "Residuals of Heart Weight")
abline(0, 0, lty = 5)
# plot the residuals
segments(cats$Bwt,
cats$Hwt,
cats$Bwt,
model$coefficients[1] + model$coefficients[2], col = 'red')
egments(cats$Bwt,
cats$Hwt,
cats$Bwt,
model$coefficients[1] + model$coefficients[2], col = 'red')
segments(cats$Bwt,
cats$Hwt,
cats$Bwt,
model$coefficients[1] + model$coefficients[2], col = 'red')
# Your code here
newdata = data.frame(Bwt = c(2.8, 5, 10))
predict(model, newdata, interval='confidence')
predict(model, newdata, interval='prediction')
Hwt.bc = log(cats$Hwt)
model.bc = lm(Hwt.bc ~ cats$Bwt) # Creating a new regression based on the transformed variable, Hwt.bc
model.bc
shiny::runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?selectizeInput
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
df$variety[df$variety == input$variety1]
df$variety[df$variety == 'merlot']
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
df %>% select(everything(), -X.1, -X, -description, -region_2)
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?return
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?break
?if
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?observe
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
shiny::runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
df
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
View(wine_words_filtered)
View(wine_words_filtered)
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
View(wine_words_filtered)
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
shiny::runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(dplyr)
library(stats)
library(ggplot2)
library(plotly)
library(bootstraplib)
library(rsconnect)
setwd("~/Desktop/NYCDSA/Capstone/data/Linked_BD_17")
natall = read.csv('natality_all.csv', stringsAsFactors = F)
natall_small = natall %>% select(infant_living_at_report, infant_breastfed_at_discharge,
mothers_bmi, mothers_age, mothers_race, mothers_education, fathers_education, mothers_marital_status,
admit_NICU,surfactant,antibiotics_for_newborn,seizures,assist_vent_immed,assist_vent_after6,
combined_gestation_wk, APGAR_score_5min, APGAR_score_10min, cigs_tri1, cigs_tri2, cigs_tri3)
setwd("~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft")
natall_small
write.csv(natall_small, 'natall_small.csv')
mem_used()
library(lobstr)
mem_used()
rm(natall)
mem_used()
mem_used()
sort( sapply(ls(),function(x){object.size(get(x))}))
runApp()
# Load data
df_mort = read.csv('mort17_dead.csv') # dead infants; 5570 rows (a quarter of 22,280)
df_mort = df_mort %>% select(everything(), -X)
final_del_bmi18 = read.csv('final_delivery_bmi18.csv')
risk_factors = read.csv('health_risks.csv') %>% select(everything(), -X)
infections = read.csv('health_infections.csv') %>% select(everything(), -X)
df_live = read.csv('mort17_live.csv') # live infants; 966,196 rows (a quarter of 3.8 million)
df_live = df_live %>% select(everything(), -X)
runApp()
runApp()
df_live %>%
filter(cigs_tri1 == 0) %>% # filter out unknown or not stated
summarise(live_count = n())
runApp()
natall = read.csv('../../../data/Linked_BD_17/natality_all.csv')
natall_small = natall %>% select(infant_living_at_report, infant_breastfed_at_discharge,
mothers_bmi, mothers_age, mothers_race, mothers_education, fathers_age, fathers_education, mothers_marital_status,
admit_NICU,surfactant,antibiotics_for_newborn,seizures,assist_vent_immed,assist_vent_after6,
combined_gestation_wk, APGAR_score_5min, APGAR_score_10min, cigs_tri1, cigs_tri2, cigs_tri3)
write.csv(natall_small, 'natall_small.csv')
rm(natall)
runApp()
natall = read.csv('~/Desktop/NYCDSA/Capstone/data/Linked_BD_17/natality_all.csv')
natall_small = natall %>% select(infant_living_at_report, infant_breastfed_at_discharge,
mothers_bmi, mothers_age, mothers_race, mothers_education, fathers_age, fathers_education, mothers_marital_status,
admit_NICU,surfactant,antibiotics_for_newborn,seizures,assist_vent_immed,assist_vent_after6, n_prenatal_visits,
combined_gestation_wk, APGAR_score_5min, APGAR_score_10min, cigs_tri1, cigs_tri2, cigs_tri3)
write.csv(natall_small, 'natall_small.csv')
runApp()
# Non Smokers
alive_nonsmoker <- df_live %>%
filter(cigs_tri1 == 0) %>% # filter out unknown or not stated
summarise(live_count = n())
dead_nonsmoker <- df_mort %>%
filter(cigs_tri1 == 0) %>% # filter out unknown or not stated
summarise(death_count = n())
death_rate_nonsmoker = dead_nonsmoker$death_count / ((alive_nonsmoker$live_count + dead_nonsmoker$death_count) / 1000) # Infant Mortality Rate per 1000 births
death_rate_nonsmoker
alive_smoker1less <- df_live %>%
filter((cigs_tri1 > 0), (cigs_tri1 <= 20), (cigs_tri2 == 0), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
dead_smoker1less <- df_mort %>%
filter((cigs_tri1 > 0) & (cigs_tri1 <= 20), (cigs_tri2 == 0), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
death_rate_smoker1less = dead_smoker1less$death_count / ((alive_smoker1less$live_count + dead_smoker1less$death_count) / 1000) # Infant Mortality Rate per 1000 births
death_rate_smoker1less
alive_smoker1more <- df_live %>%
filter((cigs_tri1 > 20), (cigs_tri2 == 0), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
dead_smoker1more <- df_mort %>%
filter((cigs_tri1 > 20), (cigs_tri2 == 0), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
death_rate_smoker1more = dead_smoker1more$death_count / ((alive_smoker1more$live_count + dead_smoker1more$death_count) / 1000)
death_rate_smoker1more
mom_tobacco = c('Non Smokers', 'Smokers 1 Pack or Less', 'Smokers 1 Pack or More')
death_rate = c(death_rate_nonsmoker, death_rate_smoker1less, death_rate_smoker1more)
data = data.frame(mom_tobacco, death_rate)
data$death_rate = round(data$death_rate, 1)
data # CIA World Factbook has the U.S. infant mortality rate at 5.80 in 2017
runApp()
rm(dead_nonsmoker, dead_smoker1less, dead_smoker1more, alive_nonsmoker, alive_smoker1less, alive_smoker1more)
rm(data)
runApp()
df_live %>%
filter(cigs_tri2 == 0) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter(cigs_tri2 == 0) %>% # filter out unknown or not stated
summarise(death_count = n())
df_live %>%
filter((cigs_tri2 > 20), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter((cigs_tri2 > 20), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
df_mort %>%
filter((cigs_tri2 > 20)) %>% # filter out unknown or not stated
summarise(death_count = n())
df_mort %>%
filter((cigs_tri2 > 20), (cigs_tri1 == 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
df_live %>%
filter(cigs_tri1 == 0, cigs_tri2 == 0) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter(cigs_tri1 == 0, cigs_tri2 == 0) %>% # filter out unknown or not stated
summarise(death_count = n())
runApp()
df_live %>%
filter((cigs_tri2 > 0), (cigs_tri2 <= 20), (cigs_tri1 == 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter((cigs_tri2 > 0), (cigs_tri2 <= 20), (cigs_tri1 == 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
df_live %>%
filter((cigs_tri2 > 0), (cigs_tri2 <= 20), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter((cigs_tri2 > 0), (cigs_tri2 <= 20), (cigs_tri3 == 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
runApp()
df_live %>%
filter(cigs_tri1 == 0, cigs_tri2 == 0, cigs_tri3 == 0) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter(cigs_tri1 == 0, cigs_tri2 == 0, cigs_tri3 == 0) %>% # filter out unknown or not stated
summarise(death_count = n())
df_live %>%
filter((cigs_tri3 > 0), (cigs_tri3 <= 20), (cigs_tri1 > 0), (cigs_tri2 > 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter((cigs_tri3 > 0), (cigs_tri3 <= 20), (cigs_tri1 > 0), (cigs_tri2 > 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
df_live %>%
filter(cigs_tri3 > 20, (cigs_tri1 > 0), (cigs_tri2 > 0)) %>% # filter out unknown or not stated
summarise(live_count = n())
df_mort %>%
filter(cigs_tri3 > 20, (cigs_tri1 > 0), (cigs_tri2 > 0)) %>% # filter out unknown or not stated
summarise(death_count = n())
runApp()
runApp()
?blockquote
?div
runApp()
library(tags)
runApp()
shiny::tags
runApp()
runApp()
runApp()
runApp()
df_live %>% filter(mothers_bmi == 1, gonorrhea == 'N', syphilis == 'N') %>% group_by(mothers_bmi, gonorrhea, syphilis) %>% summarise(live_count = n())
df_mort %>% filter(mothers_bmi == 1, gonorrhea == 'N', syphilis == 'N') %>% group_by(mothers_bmi, gonorrhea, syphilis) %>% summarise(live_count = n())
df_mort %>% filter(mothers_bmi == 1, gonorrhea == 'Y', syphilis == 'N') %>% group_by(mothers_bmi, gonorrhea, syphilis) %>% summarise(live_count = n())
df_mort %>% filter(mothers_bmi == 1, gonorrhea == 'N', pre_preg_diab == 'N') %>% group_by(mothers_bmi, gonorrhea, pre_preg_diab) %>% summarise(death_count = n())
df_mort %>% filter(mothers_bmi == 1, gonorrhea == 'N', syphilis == 'N', pre_preg_diab == 'N') %>% group_by(mothers_bmi, gonorrhea, pre_preg_diab) %>% summarise(death_count = n())
df_mort %>% filter(mothers_bmi == 1, gonorrhea == 'N', syphilis == 'N', chlamydia == 'N', hepB == 'N', hepC == 'N', pre_preg_diab == 'N') %>% group_by(mothers_bmi, gonorrhea, pre_preg_diab) %>% summarise(death_count = n())
df_mort %>% filter(mothers_bmi == 1, gonorrhea == 'N', syphilis == 'N', chlamydia == 'N', hepB == 'N', hepC == 'N', pre_preg_diab == 'N') %>% group_by(mothers_bmi) %>% summarise(death_count = n())
df_mort %>%
filter(mothers_bmi == mothers_bmi_Input,
gonorrhea == 'N', syphilis == 'N', chlamydia == 'N', hepB == 'N', hepC == 'N',
pre_preg_diab == 'N', gest_diab == 'N', pre_preg_hypten == 'N', gest_hypten, hypten_ecl == 'N', prev_preterm_birth == 'N') %>%
group_by(mothers_bmi) %>%
summarise(death_count = n())
df_mort %>%
filter(mothers_bmi == 1,
gonorrhea == 'N', syphilis == 'N', chlamydia == 'N', hepB == 'N', hepC == 'N',
pre_preg_diab == 'N', gest_diab == 'N', pre_preg_hypten == 'N', gest_hypten, hypten_ecl == 'N', prev_preterm_birth == 'N') %>%
group_by(mothers_bmi) %>%
summarise(death_count = n())
df_mort %>%
filter(mothers_bmi == 1,
gonorrhea == 'N', syphilis == 'N', chlamydia == 'N', hepB == 'N', hepC == 'N',
pre_preg_diab == 'N', gest_diab == 'N', pre_preg_hypten == 'N', gest_hypten == 'N', hypten_ecl == 'N', prev_preterm_birth == 'N') %>%
group_by(mothers_bmi) %>%
summarise(death_count = n())
df_live %>%
filter(mothers_bmi == 1,
gonorrhea == 'N', syphilis == 'N', chlamydia == 'N', hepB == 'N', hepC == 'N',
pre_preg_diab == 'N', gest_diab == 'N', pre_preg_hypten == 'N', gest_hypten == 'N', hypten_ecl == 'N', prev_preterm_birth == 'N') %>%
group_by(mothers_bmi) %>%
summarise(live_count = n())
runApp()
df_live %>%
filter(mothers_bmi == 2,
gonorrhea == 'Y',
pre_preg_diab == 'N', gest_diab == 'N', pre_preg_hypten == 'N', gest_hypten == 'N', hypten_ecl == 'N', prev_preterm_birth == 'N') %>%
group_by(mothers_bmi, gonorrhea) %>%
summarise(live_count = n())
df_mort %>%
filter(mothers_bmi == 2,
gonorrhea == 'Y',
pre_preg_diab == 'N', gest_diab == 'N', pre_preg_hypten == 'N', gest_hypten == 'N', hypten_ecl == 'N', prev_preterm_birth == 'N') %>%
group_by(mothers_bmi, gonorrhea) %>%
summarise(death_count = n())
as.factor("gonorrhea")
gonorrhea
runApp()
runApp()
runApp()
