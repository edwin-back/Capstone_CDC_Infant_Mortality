data_gestdiab
live$live_count
alive$live_count
alive = df_live %>%
filter(pre_preg_hypten != 'U') %>%
group_by(pre_preg_hypten) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(pre_preg_hypten != 'U') %>%
group_by(pre_preg_hypten) %>%
summarise(death_count = n())
death_rate = dead$death_count / ((alive$live_count + dead$death_count) / 1000) # Infant Deaths per 1000 births
mom_infect = c("No", "Yes")
data_prehyper = data.frame(mom_infect, death_rate)
data_prehyper$death_rate = round(data_prehyper$death_rate, 1)
data_prehyper
alive = df_live %>%
filter(gest_hypten != 'U') %>%
group_by(gest_hypten) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(gest_hypten != 'U') %>%
group_by(gest_hypten) %>%
summarise(death_count = n())
death_rate = dead$death_count / ((alive$live_count + dead$death_count) / 1000) # Infant Deaths per 1000 births
mom_infect = c("No", "Yes")
data_gesthyper = data.frame(mom_infect, death_rate)
data_gesthyper$death_rate = round(data_gesthyper$death_rate, 1)
data_gesthyper
##################################################################################################################
data_prediab
alive = df_live %>%
filter(hypten_ecl != 'U') %>%
group_by(hypten_ecl) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(hypten_ecl != 'U') %>%
group_by(hypten_ecl) %>%
summarise(death_count = n())
death_rate = dead$death_count / ((alive$live_count + dead$death_count) / 1000) # Infant Deaths per 1000 births
mom_infect = c("No", "Yes")
data_hyperecl = data.frame(mom_infect, death_rate)
data_hyperecl$death_rate = round(data_hyperecl$death_rate, 1)
data_hyperecl
alive = df_live %>%
filter(prev_preterm_birth != 'U') %>%
group_by(prev_preterm_birth) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(prev_preterm_birth != 'U') %>%
group_by(prev_preterm_birth) %>%
summarise(death_count = n())
death_rate = dead$death_count / ((alive$live_count + dead$death_count) / 1000) # Infant Deaths per 1000 births
mom_infect = c("No", "Yes")
data_preterm = data.frame(mom_infect, death_rate)
data_preterm$death_rate = round(data_preterm$death_rate, 1)
data_preterm
total = rbind(data_prediab, data_gestdiab, data_prehyper, data_gesthyper, data_hyperecl, data_preterm)
total
write.csv(total, './data/infections.csv')
total[, total$mom_infect == 'No']
total %>% filter(mom_infect == 'No')
##################################################################################################################
data_prediab
data_gestdiab
total_no = total %>% filter(mom_infect == 'No')
total_no$death_rate
total_yes = total %>% filter(mom_infect == 'Yes')
total_yes$death_rate
infect = c("Pre-Pregnancy Diabetes", "Gestational Diabetes", "Pre-Pregnancy Hypertension", "Gestational Hypertension", "Hyptertension Eclampsia", "Previous Preterm Birth")
total %>% filter(mom_infect == 'Yes') %>% .$death_rate
infect_yes = total %>% filter(mom_infect == 'Yes') %>% .$death_rate
infect_yes
infect_no = total %>% filter(mom_infect == 'No') %>% .$death_rate
infect_no
##################################################################################################################
data_prediab
data = data.frame(infect, infect_yes, infect_no)
data$death_rate = round(data$death_rate, 1)
data
data$infect_yes = round(data$infect_yes, 1)
data$infect_no = round(data$infect_no, 1)
data
fig <- plot_ly(data, x = ~infect, y = ~infect_yes, type = 'bar', name = 'Infection Present')
fig <- fig %>% add_trace(y = ~infect_no, name = 'Infection Absent')
fig <- fig %>% layout(yaxis = list(title = 'Infant Death Rate Per 1,000 Births'), barmode = 'group')
fig
infections = read.csv('./data/infections.csv')
infections
runApp()
runApp()
runApp()
names(final_del_bmi18)
runApp()
round(final_del_bmi18$mothers_bmi_average, 2)
round(final_del_bmi18$mothers_bmi_average, 0)
final_del_bmi18$mothers_bmi_average = round(final_del_bmi18$mothers_bmi_average, 0)
runApp()
runApp()
View(final_del_bmi18)
runApp()
risk_factors = read.csv('./data/health_risks.csv')
runApp()
View(risk_factors)
runApp()
library(rsconnect)
View(natall)
View(natall)
rm(infections)
rm(fig)
rm(dead)
rm(dead1, alive1, alive)
rm(data)
rsconnect::setAccountInfo(name='edwinback', token='69DC9158272CB856A5E5DDACDDA87478', secret='rBqLZhk14FFEN+GueOSWGfcjQ9vihy+e4og2bS5E')
alive = df_live %>%
filter(gonorrhea != 'U') %>%
group_by(gonorrhea) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(gonorrhea != 'U') %>%
group_by(gonorrhea) %>%
summarise(death_count = n())
dead
death_rate = dead$death_count / ((alive$live_count + dead$death_count) / 1000) # Infant Mortality Rate per 1000 births
death_rate
class(death_rate)
death_rate_gon = dead$death_count / ((alive$live_count + dead$death_count) / 1000) # Infant Mortality Rate per 1000 births
death_rate_gon
data = data.frame(alive$gonorrhea, death_rate_gon)
data
death_rate_gon = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
data = data.frame(alive$gonorrhea, death_rate_gon)
data
mom_risk = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
data = data.frame(mom_risk, death_rate_gon)
data
mom_risk = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
risk_gono = data.frame(mom_risk, death_rate)
risk_gono
View(risk_gono)
mom_infect = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
gonorrhea = data.frame(mom_risk, death_rate)
gonorrhea
rm(alive, dead)
rm(data)
rm(total, total_no, total_yes)
rm(risk_gono)
alive = df_live %>%
filter(syphilis != 'U') %>%
group_by(syphilis) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(syphilis != 'U') %>%
group_by(syphilis) %>%
summarise(death_count = n())
mom_infect = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
syphilis = data.frame(mom_risk, death_rate)
syphilis
alive = df_live %>%
filter(chlamydia != 'U') %>%
group_by(chlamydia) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(chlamydia != 'U') %>%
group_by(chlamydia) %>%
summarise(death_count = n())
mom_infect = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
chlamydia = data.frame(mom_risk, death_rate)
chlamydia
alive = df_live %>%
filter(hepB != 'U') %>%
group_by(hepB) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(hepB != 'U') %>%
group_by(hepB) %>%
summarise(death_count = n())
mom_infect = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
hepB = data.frame(mom_risk, death_rate)
hepB
alive = df_live %>%
filter(hepC != 'U') %>%
group_by(hepC) %>%
summarise(live_count = n())
dead = df_mort %>%
filter(hepC != 'U') %>%
group_by(hepC) %>%
summarise(death_count = n())
mom_infect = c("No", "Yes")
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count) / 1000), 1) # Infant Mortality Rate per 1000 births
hepC = data.frame(mom_risk, death_rate)
hepC
total = rbind(gonorrhea, syphilis, chlamydia, hepB, hepC)
total
setwd("~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft/data")
total_no = total %>% filter(mom_infect == 'No')
total_no$death_rate
total_no = total %>% filter(mom_risk == 'No')
total_no$death_rate
total_yes = total %>% filter(mom_risk == 'Yes')
total_yes$death_rate
infect = c("Gonorrhea", "Syphilis", "Chlamydia", "Hepatitis B", "Hepatitis C")
infect_yes = total %>% filter(mom_risk == 'Yes') %>% .$death_rate
infect_no = total %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(infect, infect_yes, infect_no)
data
write.csv(total, 'health_infections.csv')
infections = read.csv('./data/health_infections.csv') %>% select(everything(), -X)
infections = read.csv('./health_infections.csv') %>% select(everything(), -X)
infections = data
infections
runApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
install.packages("shinyWidgets")
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
runApp('Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
infect = c("Gonorrhea", "Syphilis", "Chlamydia", "Hepatitis B", "Hepatitis C")
infect_yes = infections %>% filter(mom_risk == 'Yes') %>% .$death_rate
infect_no = infections %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(infect, infect_yes, infect_no)
data
risk = c("Pre-Pregnancy Diabetes", "Gestational Diabetes", "Pre-Pregnancy Hypertension", "Gestational Hypertension", "Hyptertension Eclampsia", "Previous Preterm Birth")
risk_yes = risk_factors %>% filter(mom_risk == 'Yes') %>% .$death_rate
risk_no = risk_factors %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(risk, risk_yes, risk_no)
risk = c("Pre-Pregnancy Diabetes", "Gestational Diabetes", "Pre-Pregnancy Hypertension", "Gestational Hypertension", "Hyptertension Eclampsia", "Previous Preterm Birth")
risk_yes = risk_factors %>% filter(mom_risk == 'Yes') %>% .$death_rate
risk_no = risk_factors %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(risk, risk_yes, risk_no)
risk = c("Pre-Pregnancy Diabetes", "Gestational Diabetes", "Pre-Pregnancy Hypertension", "Gestational Hypertension", "Hyptertension Eclampsia", "Previous Preterm Birth")
risk_yes = risk_factors %>% filter(mom_risk == 'Yes') %>% .$death_rate
risk_no = risk_factors %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(risk, risk_yes, risk_no)
View(risk_factors)
infect = c("Gonorrhea", "Syphilis", "Chlamydia", "Hepatitis B", "Hepatitis C")
infect_yes = infections %>% filter(mom_risk == 'Yes') %>% .$death_rate
infect_no = infections %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(infect, infect_yes, infect_no)
data
risk = c("Pre-Pregnancy Diabetes", "Gestational Diabetes", "Pre-Pregnancy Hypertension", "Gestational Hypertension", "Hyptertension Eclampsia", "Previous Preterm Birth")
risk_yes = risk_factors %>% filter(mom_infect == 'Yes') %>% .$death_rate
risk_no = risk_factors %>% filter(mom_infect == 'No') %>% .$death_rate
data = data.frame(risk, risk_yes, risk_no)
data$risk_yes = round(data$risk_yes, 1)
data$risk_no = round(data$risk_no, 1)
data
runApp('Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
infect = c("Gonorrhea", "Syphilis", "Chlamydia", "Hepatitis B", "Hepatitis C")
infect_yes = infections %>% filter(mom_risk == 'Yes') %>% .$death_rate
infect_no = infections %>% filter(mom_risk == 'No') %>% .$death_rate
data = data.frame(infect, infect_yes, infect_no)
data
View(infections)
infections = read.csv('./data/health_infections.csv') %>% select(everything(), -X)
infections = read.csv('./health_infections.csv') %>% select(everything(), -X)
setwd("~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft")
infections = read.csv('./health_infections.csv') %>% select(everything(), -X)
View(infections)
View(infections)
runApp()
runApp()
runApp()
natall %>% select(infant_living_at_report, infant_breastfed_at_discharge,
mothers_bmi, mothers_age, mothers_race, mothers_education, fathers_education, mothers_marital_status,
admit_NICU,surfactant, antibiotics_for_newborn,seizures, assist_vent_immed, assist_vent_after6,
combined_gestation_wk, APGAR_score_5min, APGAR_score_10min,
mothers_hispanic_origin2, fathers_race, fathers_hispanic_origin2, n_prenatal_visits,
last_norm_menses_mo, birth_weight_gm, )
natall_small = natall %>% select(infant_living_at_report, infant_breastfed_at_discharge,
mothers_bmi, mothers_age, mothers_race, mothers_education, fathers_education, mothers_marital_status,
admit_NICU,surfactant, antibiotics_for_newborn,seizures, assist_vent_immed, assist_vent_after6,
combined_gestation_wk, APGAR_score_5min, APGAR_score_10min,
mothers_hispanic_origin2, fathers_race, fathers_hispanic_origin2, n_prenatal_visits,
last_norm_menses_mo, birth_weight_gm, )
write.csv(natall_small, 'natall_small.csv')
natall_small %>%
filter(APGAR_score_10min != 88, APGAR_score_10min != 99) %>%
group_by(APGAR_score_10min,mothers_marital_status) %>%
summarise_at(vars(mothers_education,mothers_age,fathers_education,fathers_age,mothers_race,
mothers_hispanic_origin2,fathers_race,fathers_hispanic_origin2,n_prenatal_visits,
mothers_bmi,last_norm_menses_mo,combined_gestation_wk,birth_weight_gm),
list(average = mean))
natall_small = natall %>% select(infant_living_at_report, infant_breastfed_at_discharge,
mothers_bmi, mothers_age, mothers_race, mothers_education, fathers_education, mothers_marital_status,
admit_NICU,surfactant, antibiotics_for_newborn,seizures, assist_vent_immed, assist_vent_after6,
combined_gestation_wk, APGAR_score_5min, APGAR_score_10min,
mothers_hispanic_origin2, fathers_age, fathers_race, fathers_hispanic_origin2, n_prenatal_visits,
last_norm_menses_mo, birth_weight_gm, )
write.csv(natall_small, 'natall_small.csv')
natall_small %>%
filter(APGAR_score_10min != 88, APGAR_score_10min != 99) %>%
group_by(APGAR_score_10min,mothers_marital_status) %>%
summarise_at(vars(mothers_education,mothers_age,fathers_education,fathers_age,mothers_race,
mothers_hispanic_origin2,fathers_race,fathers_hispanic_origin2,n_prenatal_visits,
mothers_bmi,last_norm_menses_mo,combined_gestation_wk,birth_weight_gm),
list(average = mean))
runApp()
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
?htmlwidgets
runApp()
install.packages("libapparmor")
install.packages("RAppArmor")
runApp()
runApp()
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
library(lobstr)
install.packages("lobstr")
library(lobstr)
mem_used()
obj_size()
obj_size(df_live)
obj_size(plotly)
obj_size(library(plotly))
obj_size(plotly)
library(shinyWidgets)
library(shinydashboard)
library(dplyr)
library(stats)
library(ggplot2)
library(plotly)
library(bootstraplib)
obj_size(shiny)
# Load packages#######################################################################
######################################################################################
######################################################################################
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(dplyr)
obj_size(dplr)
obj_size(dplyr)
obj_sizes("dplyr")
obj_size("plotly")
obj_size("bootstraplib")
obj_size("shinydashboard")
mem_used()
obj_size(natall_small)
memory.limit()
sort( sapply(ls(), function(x){object.size(get(x))}))
mem
sort( sapply(ls(), function(x){object.size(get(x))}))
# Load data
df_mort = read.csv('mort17_dead.csv') # dead infants; 5570 rows (a quarter of 22,280)
df_mort = df_mort %>% select(everything(), -X)
sort( sapply(ls(), function(x){object.size(get(x))}))
df_mort = df_mort %>% select(everything(), -X)
df_live = read.csv('mort17_live.csv') # live infants; 966,196 rows (a quarter of 3.8 million)
df_live = df_live %>% select(everything(), -X)
natall_small = read.csv('natall_small.csv', stringsAsFactors = F)
final_del_bmi18 = read.csv('final_delivery_bmi18.csv')
risk_factors = read.csv('health_risks.csv') %>% select(everything(), -X)
infections = read.csv('health_infections.csv') %>% select(everything(), -X)
sort( sapply(ls(), function(x){object.size(get(x))}))
rsconnect::deployApp('~/Desktop/NYCDSA/Capstone/capstone-CDC-infants/Edwin/app_draft')
mem_used()
sort( sapply(ls(), function(x){object.size(get(x))}))
obj_size("htmltools")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?validColors
runApp()
runApp()
runApp()
switch("Under 15 years old",
"Under 15 years old" = 1,
"15 to 19 years old" = 2,
"20 to 24 years old" = 3,
"25 to 29 years old" = 4,
"30 to 34 years old" = 5,
"35 to 39 years old" = 6,
"40 to 44 years old" = 7,
"45 to 50 years old" = 8,
"50 to 54 years old" = 9)
runApp()
death_rate = dead$death_count / ((alive$live_count + dead$death_count)/1000) # Infant Mortality Rate per 1000 births
death_rate
df_mort %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(death_count = n())
runApp()
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n()) %>%
filter(mothers_age_recode == 1)
alive <- df_live %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n()) %>%
filter(mothers_age_recode == 1)
df_live %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n()) %>%
filter(mothers_age_recode == 1)
df_live %>%
filter(mothers_age_recode == 1) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n())
runApp()
df_mort %>%
filter(mothers_age_recode == 1) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(death_count = n())
alive
alive <- df_live %>%
filter(mothers_age_recode == 1)
# custom_age_Input(), mothers_education == custom_edu_Input(), mothers_race == custom_race_Input()) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n())
str(df_live)
df_live %>%
filter(mothers_age_recode == 1) %>%
# custom_age_Input(), mothers_education == custom_edu_Input(), mothers_race == custom_race_Input()) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n())
df_mort %>%
filter(mothers_age_recode == 1) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(death_count = n())
df_live %>%
filter(mothers_age_recode == 3, mothers_education = 3, mothers_race == 3) %>%
# custom_age_Input(), mothers_education == custom_edu_Input(), mothers_race == custom_race_Input()) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n())
df_live %>%
filter(mothers_age_recode == 3, mothers_education == 3, mothers_race == 3) %>%
# custom_age_Input(), mothers_education == custom_edu_Input(), mothers_race == custom_race_Input()) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n())
df_mort %>%
filter(mothers_age_recode == 3, mothers_education == 3, mothers_race == 3) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(death_count = n())
df_mort %>%
filter(mothers_age_recode == 3, mothers_education == 3, mothers_race == 3) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(death_count = n())
alive <- df_live %>%
filter(mothers_age_recode == 3, mothers_education == 3, mothers_race == 3) %>%
# custom_age_Input(), mothers_education == custom_edu_Input(), mothers_race == custom_race_Input()) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(live_count = n())
#
dead <- df_mort %>%
filter(mothers_age_recode == 3, mothers_education == 3, mothers_race == 3) %>%
group_by(mothers_age_recode, mothers_education, mothers_race) %>%
summarise(death_count = n())
# custom_age_Input(), mothers_education == custom_edu_Input(), mothers_race == custom_race_Input())
death_rate = dead$death_count / ((alive$live_count + dead$death_count)/1000) # Infant Mortality Rate per 1000 births
death_rate
death_rate = round(dead$death_count / ((alive$live_count + dead$death_count)/1000), 1) # Infant Mortality Rate per 1000 births
death_rate
runApp()
runApp()
switch('White',
'White' = 1,
'Black' = 2,
'American Indian Alaskan Native' = 3,
'Asian' = 4,
'Native Hawaiian or Pacific Islander' = 5,
'More Than One (Mixed)' = 6)
custom_race_Input = reactive({
switch(input$mothers_race_Input,
'White' = 1,
'Black' = 2,
'American Indian Alaskan Native' = 3,
'Asian' = 4,
'Native Hawaiian or Pacific Islander' = 5,
'More Than One (Mixed)' = 6)
})
custom_race_Input
runApp()
deadmau = switch(input$mothers_race_Input,
'White' = 1,
'Black' = 2,
'American Indian Alaskan Native' = 3,
'Asian' = 4,
'Native Hawaiian or Pacific Islander' = 5,
'More Than One (Mixed)' = 6)
deadmau = switch("White",
'White' = 1,
'Black' = 2,
'American Indian Alaskan Native' = 3,
'Asian' = 4,
'Native Hawaiian or Pacific Islander' = 5,
'More Than One (Mixed)' = 6)
deadmau
deadmau[1]
deadmau[[1]]
deadmau[1][1]
deadmau[[1]][1]
runApp()
runApp()
runApp()
runApp()
str(df_live)
runApp()
