#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed)
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
#Calculating the residual values.
residuals = cars$dist - (beta0 + beta1*cars$speed) # Y - Prediction - Epsilon, Residuals(epsilon) = Y_true - Prediction
#Note the sum of the residuals is 0.
sum(residuals)
#Visualizing the residuals.
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
##############################################
#####Manual example with the cars dataset#####
##############################################
help(cars)
cars #Investigating the cars dataset.
#Basic numerical EDA for cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
library(ggplot2)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
#Manual calculation of simple linear regression coefficients.
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2) # Slide 15 of RML_SimpleML
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
#Adding the least squares regression line to the plot.
abline(beta0, beta1, lty = 2)
####################################################
#####Checking assumptions with the cars dataset#####
####################################################
#Linearity
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Constant Variance & Independent Errors
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
#################################################
#####Automatic example with the cars dataset#####
#################################################
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
#Notice that the F-statistic value for the overall regression is the same as the
#square of the t-statistic value for the speed coefficient:
t.statistic = 9.464
f.statistic = 89.57
t.statistic^2
confint(model) #Creating 95% confidence intervals for the model coefficients.
####################################################
#####Checking assumptions with the cars dataset#####
####################################################
#Linearity
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
#Constant Variance & Independent Errors
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
#Visualizing another influence plot for the regression model.
library(car) #Companion to applied regression.
influencePlot(model)
#####################################
#####Predicting New Observations#####
#####################################
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
predict(model, newdata, interval = "confidence") #Construct confidence intervals
predict(model, newdata, interval = "prediction") #Construct prediction invervals
#Constructing confidence and prediction bands for the scope of our data.
newdata = data.frame(speed = 4:25)
conf.band = predict(model, newdata, interval = "confidence")
pred.band = predict(model, newdata, interval = "prediction")
#Visualizing the confidence and prediction bands.
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
####################################
#####The Box-Cox Transformation#####
####################################
library(car)
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value, find the x which gives us the maximum of y
lambda
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
boxCox(model.bc) #What happens if we want to apply the Box-Cox transformation
#####################################################
#####Example using the State Information Dataset#####
#####################################################
help(state.x77)
state.x77 #Investigating the state.x77 dataset.
#Cleaning up the column names so that there are no spaces.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
states = as.data.frame(state.x77) #Forcing the state.x77 dataset to be a dataframe.
#Cleaning up the column names so that there are no spaces.
colnames(states)[4] = "Life.Exp"
colnames(states)[6] = "HS.Grad"
#Creating a population density variable.
states[,9] = (states$Population*1000)/states$Area # new column with population desnity
colnames(states)[9] = "Density"
#Basic numerical EDA for states dataset.
summary(states)
sapply(states, sd)
cor(states)
# if using simple pure linear regression, no need to normalize.
cor(states)
# if using simple pure linear regression, no need to normalize.
cor(states)
#Basic graphical EDA for the states dataset.
plot(states)
#Creating a saturated model (a model with all variables included).
model.saturated = lm(Life.Exp ~ ., data = states)
summary(model.saturated) #Many predictor variables are not significant, yet the
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
# Your code here
library(MASS)
cats
ggplot(data = cats, aes(x = cats$Bwt, y = cats$Hwt)) + geom_point(aes(color = cats$Sex)) + labs(title = "Cat Heart Weight vs. Body Weight", x = "Heart Weight", y = "Body Weight")
# Your code here
library(ggplot2)
# Your code here
library(ggplot2)
ggplot(data = cats, aes(x = cats$Bwt, y = cats$Hwt)) + geom_point(aes(color = cats$Sex)) + labs(title = "Cat Heart Weight vs. Body Weight", x = "Heart Weight", y = "Body Weight")
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cats Dataset")
# Your code here
# Part A: regression equation
model = lm(Hwt ~ Bwt, data = cats)
summary(model)
plot(cats$Bwt, cats$Hwt, xlab = "Body Weight in kg", ylab = "Heart Weight in g", main = "Scatterplot of Cats Dataset")
abline(a = -0.3567, b = 4.0341, lty = 2)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cats Dataset")
abline(h = 0, lty = 2)
#Normality
qqnorm(model$residuals)
qqline(model$residuals)
qqnorm(model$residuals)
qqline(model$residuals)
plot(cats$Hwt, Hwt.res, main = "Residuals vs. Heart Weight", xlab = "Heart Weight", ylab = "Residuals of Heart Weight")
ggplot(data = cats, aes(x = cats$Bwt, y = cats$Hwt)) + geom_point() + labs(title = "Cat Heart Weight vs. Body Weight", x = "Heart Weight", y = "Body Weight")
Hwt.res = resid(model)
plot(cats$Hwt, Hwt.res, main = "Residuals vs. Heart Weight", xlab = "Heart Weight", ylab = "Residuals of Heart Weight")
abline(0, 0, lty = 5)
# plot the residuals
segments(cats$Bwt,
cats$Hwt,
cats$Bwt,
model$coefficients[1] + model$coefficients[2], col = 'red')
egments(cats$Bwt,
cats$Hwt,
cats$Bwt,
model$coefficients[1] + model$coefficients[2], col = 'red')
segments(cats$Bwt,
cats$Hwt,
cats$Bwt,
model$coefficients[1] + model$coefficients[2], col = 'red')
# Your code here
newdata = data.frame(Bwt = c(2.8, 5, 10))
predict(model, newdata, interval='confidence')
predict(model, newdata, interval='prediction')
Hwt.bc = log(cats$Hwt)
model.bc = lm(Hwt.bc ~ cats$Bwt) # Creating a new regression based on the transformed variable, Hwt.bc
model.bc
shiny::runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?selectizeInput
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
df$variety[df$variety == input$variety1]
df$variety[df$variety == 'merlot']
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
df %>% select(everything(), -X.1, -X, -description, -region_2)
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?return
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?break
?if
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
?observe
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
shiny::runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
df
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
View(wine_words_filtered)
View(wine_words_filtered)
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
View(wine_words_filtered)
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
shiny::runApp('NYCDSA/Projects/proj2_shiny/wine_enthusiast_reviews/myApp')
install.packages(c("ExPanDaR", "shinythemes"))
shiny::runApp('NYCDSA/Capstone')
setwd('~/Desktop/NYCDSA/Capstone')
# Edwin's wd
setwd('~/Desktop/NYCDSA/Capstone/data/Linked_BD_17')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
?navbarPage
install("fontawesome")
install.packages("fontawesome")
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
?tabPanel
y)
library(shinythemes)
library(plyr)
library(dplyr)
library(readr)
library(data.table)
library(splitstackshape)
library(zoo)
library(DT)
library(stats)
library(base)
library(ExPanDaR)
library(ggplot2)
library(rsconnect)
# Edwin's wd
setwd('~/Desktop/NYCDSA/Capstone/data/Linked_BD_17')
###### FOR THE APP WE NEED TO ADD A NEW ROW INSIDE OUR DATAFRAME   ###################
# Load data
df_mort = read.csv('./Linked_2017_1.csv')
View(df_mort)
###### FOR THE APP WE NEED TO ADD A NEW ROW INSIDE OUR DATAFRAME   ###################
# Load data
df_mort = read.csv('./Linked_2017_1.csv')
View(df_mort)
df_mort = df_mort %>% select(everything(), -age_at_death_in_days, -age_at_death_intervals, -manner_of_death, -place_of_injury, -infant_cause_of_death)
?selectizeInput
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
?switch
df_mort %>%
select(mothers_age_recode, mothers_education, mothers_race, birth_year) %>%
group_by(mothers_age_recode == 1,
mothers_education == 1,
mothers_race == 1) %>%
summarise(death_count = n(), percent_deaths = death_count/sum(death_count))
?group_by
df_mort %>%
select(mothers_age_recode, mothers_education, mothers_race, birth_year) %>%
group_by(mothers_age_recode,
mothers_education,
mothers_race) %>%
summarise(death_count = n(), percent_deaths = death_count/sum(death_count))
my_tbl = df_mort %>%
select(mothers_age_recode, mothers_education, mothers_race, birth_year) %>%
group_by(mothers_age_recode,
mothers_education,
mothers_race) %>%
summarise(death_count = n(), percent_deaths = death_count/sum(death_count))
View(my_tbl)
my_tbl = df_mort %>%
select(mothers_age_recode, mothers_education, mothers_race, birth_year) %>%
filter(mothers_age_recode,
mothers_education,
mothers_race) %>%
summarise(death_count = n(), percent_deaths = death_count/sum(death_count))
View(my_tbl)
my_tbl = df_mort %>%
select(mothers_age_recode, mothers_education, mothers_race, birth_year) %>%
group_by(mothers_age_recode,
mothers_education,
mothers_race) %>%
filter(mothers_age_recode = 1,
mothers_education = 1,
mothers_race = 1) %>%
summarise(death_count = n(), percent_deaths = death_count/sum(death_count))
my_tbl = df_mort %>%
select(mothers_age_recode, mothers_education, mothers_race, birth_year) %>%
group_by(mothers_age_recode,
mothers_education,
mothers_race) %>%
filter(mothers_age_recode == 1,
mothers_education == 1,
mothers_race == 1) %>%
summarise(death_count = n(), percent_deaths = death_count/sum(death_count))
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n())
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n())
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n())
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count/sum(death_count))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = sum(death_count))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / tally(death_count))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / tally(df_mort))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / count(df_mort))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / sum(n()))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / count(df_mort))
runApp('~/Desktop/NYCDSA/Capstone')
count(mort_df)
count(df_mort)
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / count(df_mort))
count(df_mort)
death_count
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = (death_count / count(df_mort)))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n()) %>%
mutate(death_percent = death_count / count(df_mort))
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n())
count(df_mort)
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = death_count / 322066)
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = (death_count / 322066)*100)
df_mort %>%
group_by(mothers_age_recode) %>%
summarise(death_count = n(), death_percent = round((death_count / 322066)*100, 2))
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
###### FOR THE APP WE NEED TO ADD A NEW ROW INSIDE OUR DATAFRAME   ###################
# Load data and do a little cleaning
#df_mort = read.csv('./Linked_2017_1.csv')
#df_mort = df_mort %>% select(everything(), -age_at_death_in_days, -age_at_death_intervals, -manner_of_death, -place_of_injury, -infant_cause_of_death)
#View(df_mort)
setwd('~/Desktop/NYCDSA/Capstone/app_draft')
runApp('~/Desktop/NYCDSA/Capstone')
runApp('~/Desktop/NYCDSA/Capstone')
?theme
remotes::install_github("rstudio/shiny")
library(bootstraplib)
remotes::install_github("rstudio/bootstraplib")
library(bootstraplib)
install.packages('htmltools')
library(bootstraplib)
brary(shiny)
library(shinythemes)
library(plyr)
library(dplyr)
library(readr)
library(data.table)
library(splitstackshape)
library(zoo)
library(DT)
library(stats)
library(base)
library(ExPanDaR)
library(ggplot2)
library(rsconnect)
library(bootstraplib
)
bs_theme_new(version = "4+3", bootswatch = "minty")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_mort %>%
group_by(delivery_payment_source,
attendant_at_birth, fetal_present_at_birth, final_delivery_method) %>%
summarise_at(vars(mothers_bmi, pre_preg_lbs, delivery_lbs),
list(average = mean))
df_mort %>%
group_by(attendant_at_birth) %>%
summarise_at(vars(mothers_bmi, pre_preg_lbs, delivery_lbs),
list(average = mean))
df_mort %>%
group_by(attendant_at_birth) %>%
summarise_at(vars(mothers_bmi, pre_preg_lbs), list(average = mean))
runApp()
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
?div
install.packages("shinytags")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
